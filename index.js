import { Telegraf } from 'telegraf';
import fetch from 'node-fetch';
import 'dotenv/config';

const bot = new Telegraf(process.env.TELEGRAM_API);
const googleGeminiApi = process.env.GOOGLE_GEMINI_API; // Google API Key

const buffers = new Map();
const SIZE = process.env.MESSAGES_SIZE || 100;

// –ö–æ–º–∞–Ω–¥–∞ /summary
bot.command('summary', async ctx => {
  const chatId = ctx.chat.id;
  const buf = buffers.get(chatId);

  if (!buf || buf.length === 0) {
    return ctx.reply('üì≠ –ë—É—Ñ–µ—Ä –ø—É—Å—Ç. –ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å.');
  }

  const summary = await makeSummary(buf.join('\n'));
  await ctx.reply(`#summary\nüìù –°–≤–æ–¥–∫–∞ (${buf.length} —Å–æ–æ–±—â–µ–Ω–∏–π):\n\n${summary}`);

  // –ü–æ–∫–∞ –Ω–µ –±—É–¥–µ–º –æ—á–∏—â–∞—Ç—å –±—É—Ñ—Ñ–µ—Ä, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É
  // buffers.set(chatId, []);
});

// –ö–æ–º–∞–Ω–¥–∞ /clear
bot.command('clear', ctx => {
  const chatId = ctx.chat.id;
  buffers.set(chatId, []);
  ctx.reply('üßπ –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω.');
});

// –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async ctx => {
  const { id: chatId } = ctx.chat;
  const text = ctx.message.text;
  if (!text || text.startsWith('/')) return;

  const buf = buffers.get(chatId) ?? [];
  buf.push(text);
  if (buf.length < SIZE) {
    buffers.set(chatId, buf);
    return;
  }

  buffers.set(chatId, []);
  const summary = await makeSummary(buf.join('\n'));
  await ctx.reply(`üìù –ê–≤—Ç–æ-—Å–≤–æ–¥–∫–∞ (${SIZE} —Å–æ–æ–±—â–µ–Ω–∏–π):\n\n${summary}`);
});

bot.launch();
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// üëâ –°–≤–æ–¥–∫–∞ —á–µ—Ä–µ–∑ Google Gemini Pro (REST API)
async function makeSummary(text) {
  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${googleGeminiApi}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: getPrompt(text),
              }
            ]
          }
        ]
      })
    });

    const data = await response.json();

    if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
      return data.candidates[0].content.parts[0].text.trim();
    } else {
      console.error('‚ö†Ô∏è Gemini API error:', data);
      return '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É (Gemini –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª).';
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Gemini:', error);
    return '‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API.';
  }
}
