import { taskService } from '../services/tasks.js';

export function setupCallbackHandler(bot) {
  bot.on('callback_query', async (ctx) => {
    const data = ctx.callbackQuery.data;

    if (data.startsWith('save_')) {
      await handleSaveTask(ctx, data);
    } else if (data.startsWith('clear_tasks_')) {
      await handleClearTasksConfirmation(ctx, data);
    } else if (data.startsWith('confirm_clear_')) {
      await handleConfirmClear(ctx, data);
    } else if (data.startsWith('cancel_clear_')) {
      await handleCancelClear(ctx);
    }
  });
}

async function handleSaveTask(ctx, data) {
  const taskId = data.replace('save_', '');
  const taskData = taskService.getPendingTask(taskId);

  if (!taskData) {
    await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞—á–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è)');
    return;
  }

  try {
    const savedTaskId = await taskService.saveTask(taskData.chatId, taskData);

    if (savedTaskId) {
      await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
      await ctx.editMessageText(
        `‚úÖ **–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!**\n\n` +
        `üìù ${taskData.taskText}\n` +
        `üë§ –ê–≤—Ç–æ—Ä: ${taskData.author}\n` +
        `üÜî ID: ${savedTaskId}`,
        { parse_mode: 'Markdown' }
      );

      taskService.removePendingTask(taskId);
    } else {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  }
}

async function handleClearTasksConfirmation(ctx, data) {
  const chatId = parseInt(data.replace('clear_tasks_', ''));

  await ctx.editMessageText(
    '‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n' +
    'üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–¥–∞—á–∏?\n' +
    'üìù –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ', callback_data: `confirm_clear_${chatId}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_clear_${chatId}` }
          ]
        ]
      }
    }
  );
}

async function handleConfirmClear(ctx, data) {
  const chatId = parseInt(data.replace('confirm_clear_', ''));

  try {
    const success = await taskService.clearTasks(chatId);

    if (success) {
      await ctx.answerCbQuery('üóëÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã!');
      await ctx.editMessageText(
        '‚úÖ **–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã!**\n\n' +
        'üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω.',
        { parse_mode: 'Markdown' }
      );
    } else {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  }
}

async function handleCancelClear(ctx) {
  await ctx.answerCbQuery('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ');
  await ctx.editMessageText(
    '‚ùå **–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n' +
    'üìù –ó–∞–¥–∞—á–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.',
    { parse_mode: 'Markdown' }
  );
}
