import { bufferService } from '../storage/buffer.js';
import { geminiService } from '../services/gemini.js';
import { imgFlipService } from '../services/imgflip.js';
import { memePrompt } from '../prompts/index.js';
import { formatMessageForAI, safeReply, safeReplyWithPhoto } from '../utils/telegram.js';

export function setupMemeCommand(bot) {
  bot.command('meme', async (ctx) => {
    const chatId = ctx.chat.id;
    const buf = bufferService.getBuffer(chatId);

    if (!buf || buf.length === 0) {
      return ctx.reply('üì≠ –ë—É—Ñ–µ—Ä –ø—É—Å—Ç. –ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞! üòÖ');
    }

    try {
      await ctx.reply('üé® –°–æ–∑–¥–∞—é –º–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è...');

      const textBasic = buf.map(m => formatMessageForAI(m)).join('\n');
      const result = await geminiService.generateSummary(memePrompt(textBasic));

      let memeData;
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
        const cleanResult = result.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
        memeData = JSON.parse(cleanResult);
      } catch (parseError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);

        // Fallback - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ–º –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        const fallbackMeme = `üé≠ **–ú–µ–º –¥–Ω—è:**\n\nüòÇ ${result}\n\n_–ù–∞ –æ—Å–Ω–æ–≤–µ ${buf.length} —Å–æ–æ–±—â–µ–Ω–∏–π_`;
        return safeReply(ctx, fallbackMeme, { parse_mode: 'Markdown' });
      }

      if (!memeData.hasMeme) {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–µ–º –ø—Ä–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const noContentMemes = [
          'üß†üí≠ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞: –ø–∏—à—É—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\nüß†üî• –¢–æ—Ç –∂–µ —á–∞—Ç: –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –¥–ª—è –º–µ–º–∞',
          '‚ùå –û–∂–∏–¥–∞–Ω–∏–µ: —è—Ä–∫–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\n‚úÖ –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: –æ–±—ã—á–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –±–µ–∑ –¥—Ä–∞–º—ã',
          'üêï *—Å–∏–¥–∏—Ç –≤ –≥–æ—Ä—è—â–µ–π –∫–æ–º–Ω–∞—Ç–µ*\nüî• –ß–∞—Ç –±–µ–∑ –º–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ üî•\nüêï "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ"',
          'üë® –Ø\nüë© –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞\nüë©‚Äçü¶≥ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —á–∞—Ç–µ'
        ];

        const randomMeme = noContentMemes[Math.floor(Math.random() * noContentMemes.length)];
        const fallbackMessage = `üé≠ **–ú–µ–º –¥–Ω—è:**\n\n${randomMeme}\n\n_${memeData.reason || '–í —á–∞—Ç–µ –ø–æ–∫–∞ —á—Ç–æ —Å–ª–∏—à–∫–æ–º —Å–µ—Ä—å–µ–∑–Ω–æ –¥–ª—è –º–µ–º–æ–≤! üòÑ'}_`;

        return safeReply(ctx, fallbackMessage, { parse_mode: 'Markdown' });
      }


      console.log(memeData);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ImgFlip
      if (!memeData.templateId || !imgFlipService.isValidTemplate(memeData.templateId)) {
        // Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –º–µ–º—É
        const textMeme = `üé≠ **–ú–µ–º –¥–Ω—è (${memeData.templateName || 'Custom'}):**\n\n${memeData.topText}\n${memeData.bottomText}\n\n_${memeData.description || ''}_`;
        return safeReply(ctx, textMeme, { parse_mode: 'Markdown' });
      }

      try {
        // –°–æ–∑–¥–∞–µ–º –º–µ–º —á–µ—Ä–µ–∑ ImgFlip API
        await ctx.reply('üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –º–µ–º–∞...');

        const memeUrl = await imgFlipService.createMeme(
          memeData.templateId,
          memeData.topText,
          memeData.bottomText,
          memeData.extraText
        );

        console.log(memeUrl)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º-–∫–∞—Ä—Ç–∏–Ω–∫—É (–±–µ–∑–æ–ø–∞—Å–Ω–æ, —Å —Ä–µ—Ç—Ä–∞–µ–º –±–µ–∑ Markdown –ø—Ä–∏ –æ—à–∏–±–∫–µ)
        await safeReplyWithPhoto(ctx, memeUrl, {
          caption: `üé≠ **–ú–µ–º –¥–Ω—è** (${memeData.templateName || 'Custom'})\n\n_${memeData.description || `–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ ${buf.length} —Å–æ–æ–±—â–µ–Ω–∏–π`}_ üòÑ`,
          parse_mode: 'Markdown'
        });

      } catch (imgError) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞ —á–µ—Ä–µ–∑ ImgFlip:', imgError);

        // Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –º–µ–º—É –ø—Ä–∏ –æ—à–∏–±–∫–µ API
        const fallbackText = `üé≠ **–ú–µ–º –¥–Ω—è** (${memeData.templateName || 'Custom'}):\n\nüìù **–í–µ—Ä—Ö:** ${memeData.topText}\nüìù **–ù–∏–∑:** ${memeData.bottomText}`;
        const fullFallback = memeData.extraText ? `${fallbackText}\nüìù **–î–æ–ø:** ${memeData.extraText}` : fallbackText;
        const finalMessage = `${fullFallback}\n\n_${memeData.description || `–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ ${buf.length} —Å–æ–æ–±—â–µ–Ω–∏–π`}_ üòÑ\n\nü§ñ _–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –Ω–æ –º–µ–º –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–º–µ—à–Ω–æ–π!_`;

        await safeReply(ctx, finalMessage, { parse_mode: 'Markdown' });
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ meme:', error);

      // Emergency fallback –º–µ–º
      const emergencyMemes = [
        'ü§ñ‚ùå –ö–æ–≥–¥–∞ –ò–ò –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –º–µ–º\nüòÖ –ù–æ –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞',
        'üß†üí• –ú–æ–∑–≥ –±–æ—Ç–∞:\n"–ù–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å –º–µ–º"\n"–ù–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"',
        'üî•ü§ñüî•\n"–í—Å—ë —Ö–æ—Ä–æ—à–æ, –ø—Ä–æ—Å—Ç–æ –º–µ–º-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–º–Ω–æ–≥–æ —Å–ª–æ–º–∞–ª—Å—è"'
      ];

      const randomEmergencyMeme = emergencyMemes[Math.floor(Math.random() * emergencyMemes.length)];
      await ctx.reply(`üé≠ **–ê–≤–∞—Ä–∏–π–Ω—ã–π –º–µ–º:**\n\n${randomEmergencyMeme}\n\n_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üòä_`);
    }
  });
}
