import { bufferService } from '../storage/buffer.js';
import { geminiService } from '../services/gemini.js';
import { pollPrompt } from '../prompts/index.js';
import { formatMessageForAI, safeReply } from '../utils/telegram.js';

export function setupPollCommand(bot) {
  bot.command('poll', async (ctx) => {
    const chatId = ctx.chat.id;
    const buf = bufferService.getBuffer(chatId);

    if (!buf || buf.length === 0) {
      return ctx.reply('üì≠ –ë—É—Ñ–µ—Ä –ø—É—Å—Ç. –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–æ—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.');
    }

    try {
      await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø–æ—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤...');

      const textBasic = buf.map(m => formatMessageForAI(m)).join('\n');
      const result = await geminiService.generateSummary(pollPrompt(textBasic));

      let pollData;
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
        const cleanResult = result.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
        pollData = JSON.parse(cleanResult);
      } catch (parseError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
        return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }

      if (!pollData.hasPoll) {
        return ctx.reply(`ü§∑‚Äç‚ôÇÔ∏è –°–ø–æ—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n\n${pollData.reason || '–í —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ—Ç —è–≤–Ω—ã—Ö —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π –∏–ª–∏ –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.'}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞
      if (!pollData.question || !pollData.options || !Array.isArray(pollData.options) || pollData.options.length < 2) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–ø—Ä–æ—Å –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.');
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 10)
      const options = pollData.options.slice(0, 10);

      // –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å
      try {
        await ctx.replyWithPoll(
          pollData.question,
          options,
          {
            is_anonymous: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–ª
            allows_multiple_answers: false // –û–¥–∏–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
          }
        );

        await safeReply(ctx, `üìä –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ ${buf.length} —Å–æ–æ–±—â–µ–Ω–∏–π!`, {
          parse_mode: 'Markdown'
        });

      } catch (pollError) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞:', pollError);

        // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
        let fallbackMessage = `üìä **–ù–∞–π–¥–µ–Ω —Å–ø–æ—Ä–Ω—ã–π –º–æ–º–µ–Ω—Ç:**\n\n‚ùì **${pollData.question}**\n\n**–í–∞—Ä–∏–∞–Ω—Ç—ã:**\n`;
        options.forEach((option, index) => {
          fallbackMessage += `${index + 1}. ${option}\n`;
        });
        fallbackMessage += '\n_–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã._';

        await safeReply(ctx, fallbackMessage, { parse_mode: 'Markdown' });
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ poll:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
}
